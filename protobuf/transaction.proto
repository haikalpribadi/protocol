//
// Copyright (C) 2021 Grakn Labs
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

syntax = "proto3";

option java_package = "grakn.protocol";
option java_outer_classname = "TransactionProto";

import "protobuf/concept.proto";
import "protobuf/logic.proto";
import "protobuf/options.proto";
import "protobuf/query.proto";

package grakn.protocol;

message Transaction {

    message Reqs {
        repeated Transaction.Req transaction_reqs = 1;
    }

    message Req {
        string id = 1;
        map<string, string> metadata = 2;
        oneof req {
            Open.Req open_req = 3;
            Iterate.Req iterate_req = 4;
            Commit.Req commit_req = 5;
            Rollback.Req rollback_req = 6;
            Query.Req query_req = 7;
            ConceptManager.Req concept_manager_req = 8;
            Thing.Req thing_req = 9;
            grakn.protocol.Type.Req type_req = 10;
            LogicManager.Req logic_manager_req = 11;
            Rule.Req rule_req = 12;
        }
    }

    message Res {
        string id = 1;
        oneof res {
            Open.Res open_res = 2;
            Iterate.Res iterate_res = 3;
            Commit.Res commit_res = 4;
            Rollback.Res rollback_res = 5;
            Query.Res query_res = 6;
            ConceptManager.Res concept_manager_res = 7;
            Thing.Res thing_res = 8;
            grakn.protocol.Type.Res type_res = 9;
            LogicManager.Res logic_manager_res = 10;
            Rule.Res rule_res = 11;
        }
    }

    enum Type {
        READ = 0;
        WRITE = 1;
    }

    message Open {
        message Req {
            bytes session_id = 1;
            Type type = 2;
            Options options = 3;
            int32 latency_millis = 4;
        }
        message Res {}
    }

    message Iterate {
        message Req {}
        message Res {
            bool has_next = 1;
        }
    }

    message Commit {
        message Req {}
        message Res {}
    }

    message Rollback {
        message Req {}
        message Res {}
    }
}
